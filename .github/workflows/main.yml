name: Crhodis Deployment

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
  PYTHON_VERSION: '3.10'

jobs:
  test-and-deploy:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Check if .env exists
      id: check-env
      run: |
        if [ -f .env ]; then
          echo "env_exists=true" >> $GITHUB_OUTPUT
        else
          echo "env_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Create .env file if not exists
      if: steps.check-env.outputs.env_exists == 'false'
      run: |
        echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY || 'your-api-key-here' }}" > .env
        echo "Created .env file"

    - name: Test application
      run: |
        python -c "
        import os
        from dotenv import load_dotenv
        load_dotenv()
        api_key = os.getenv('OPENROUTER_API_KEY')
        if api_key and api_key != 'your-api-key-here':
            print('API key is set correctly')
        else:
            print('Warning: API key is not set or is using default value')
            exit(1)
        "

    - name: Run backend server in background
      run: |
        python main.py &
        sleep 5

    - name: Test API endpoint
      run: |
        curl -X GET http://127.0.0.1:8000/ || echo "API test completed"

    - name: Check code style
      run: |
        pip install flake8
        flake8 main.py --max-line-length=120 --ignore=E501,W293

  deploy-documentation:
    runs-on: ubuntu-latest
    needs: test-and-deploy
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Generate documentation
      run: |
        echo "# Crhodis Medical Assistant" > DEPLOYMENT.md
        echo "## System Requirements" >> DEPLOYMENT.md
        echo "- Python 3.8 or higher" >> DEPLOYMENT.md
        echo "- Flet framework" >> DEPLOYMENT.md
        echo "- FastAPI server" >> DEPLOYMENT.md
        echo "" >> DEPLOYMENT.md
        echo "## Setup Instructions" >> DEPLOYMENT.md
        echo "1. Clone the repository" >> DEPLOYMENT.md
        echo "2. Install dependencies: pip install -r requirements.txt" >> DEPLOYMENT.md
        echo "3. Set OPENROUTER_API_KEY environment variable" >> DEPLOYMENT.md
        echo "4. Run the application: python main.py" >> DEPLOYMENT.md

    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: DEPLOYMENT.md

  notify-completion:
    runs-on: ubuntu-latest
    needs: [test-and-deploy, deploy-documentation]
    
    steps:
    - name: Notify completion
      run: |
        echo "Crhodis deployment workflow completed successfully on all platforms"
